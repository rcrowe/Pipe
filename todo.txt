<?php

private $all;
private $fields;

function __set($name, $value)
{
    $this->{$name} = $value;
}

function __get($name)
{
    if (isset($this->{$name}))
    {
        return $this->{$name};
    }
}

//Handles get_by_* calls
public function __call($method, $arguments)
{
    if(strpos($method, 'get_by_') !== FALSE)
    {
        list($blank, $field) = explode('get_by_', $method);
        
        if(!in_array($field, $this->fields))
        {
            throw new Exception("Unable to find field: $field");
        }
        
        //Perform query
        if(isset($arguments[0]))
        {
            $this->where($field, $arguments[0], 'AND');
        }
        
        return $this->get(); 
    }
}

public function get($limit, $offset)
{
    $this->clear();
    
    //SELECT
    
    //WHERE
    //LIKE
    //ORDER BY
    //LIMIT
    //OFFSET
    
    $this->{$field} = $val;
    
    $this->refresh_store();
    
    //Clear SELECT,WHERE,ETC string
}

private function refresh_store()
{
    foreach($this->fields as $field)
    {
        $this->stored[$field] = $this->{$field};
    }
}

public function save()

public function delete()

public function clear()
{
    $this->all = array();
    
    foreach ($this->fields as $field)
    {
        $this->{$field} = NULL;
    }
    
    $this->refresh_store();
}

public function count()
{
    //Peferom query
    //mysql_num_rows($result)
}

public function query($sql)
{
    //Raw query
    //Like get with the results
}

public function get_by($field, $value);

//Build SELECT statement
public function select($select = '*')
{
    $this->select_str;
    
    return $this;
}

public function get_by_*

public function get_where($where = array(), $limit = NULL, $offset = NULL)
{
    //Handle array

    $this->where($where);
    
    return $this->get($limit, $offset);
}

public function where($key, $value, $type = 'AND')
{
    
}

public function or_where($key, $value)
{
    $this->where($key, $value, 'OR');
}

public function like($field, $match)

public function order_by($field, $direction)
{
    $dir = ($direction == 'ASC') ? 'DESC' : 'ASC';
    $this->orderby_str = "ORDER BY $field $dir";
}

public function limit($num)
{
    "LIMIT $num";
}

public function offset($num)
{
    "OFFSET $num";
}

?>